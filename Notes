
NOTES:

* Recovered binary(h264ref_O3) gives Illegal Instruction if my qemu image has 1GB memory.
  Reason: For some reason execution hits to ud2 instruction. This instruction is emitted
          by the compiler when there is an undefined behaviour.
 
* Recovered h264ref, hmmer and libquantum don't give exception 7 anymore.
  An example to show how to detect exception 7 efficiently. Tb addresses are different and
  in this case pcstart and pcend is the same. This is the case when function is
  valid when we hit same PC second time.
predPC: 0x804c28b PC: 0x804c2ab combinedPC: 0x804c28b0804c2ab freq: 1
[slotTranslateBlockStart]::pc: 0x804b813 tb: 0x7f9ae5027098
[slotTranslateBlockEnd]::pc: 0x804b813 tb: 0x7f9ae5027098
execute 0x804b813
[slotTranslateBlockStart]::pc: 0x804b813 tb: 0x7f9ae5027098
[slotTranslateBlockEnd]::pc: 0x804b813 tb: 0x7f9ae5027098
incEdgeFreqCalled..
predPC: 0x804c2ab PC: 0x804b813 combinedPC: 0x804c2ab0804b813 freq: 1
[slotTranslateBlockStart]::pc: 0xc100f972 tb: 0x7f9ae5027190
[slotTranslateBlockEnd]::pc: 0xc100f972 tb: 0x7f9ae5027190
[slotTranslateBlockStart]::pc: 0x804b813 tb: 0x7f9ae5027288
[slotTranslateBlockEnd]::pc: 0x804b87a tb: 0x7f9ae5027288
execute 0x804b813
[slotTranslateBlockStart]::pc: 0x804b813 tb: 0x7f9ae5027288
[slotTranslateBlockEnd]::pc: 0x804b87a tb: 0x7f9ae5027288
Func old has exception call
Old function is not valid but the new one is valid
function size :: new: 1 vs old: 1
[Export] regenerated BB for pc 0x804b813

define private i64 @tcg-llvm-tb-74-804b813(i64*) {

*We attach succs information to first bb if there are multiple bbs. It is weird.
* Use CPU_LOG_TB_NOCHAIN to get simple and accurate control flow.  



TODO:

* There are two almost identical functions for the same address in lifted(captured) code.
  1. Look what pass removes the copies.
  2. If possible, change s2e plugin(Export) to emit only one function for one address.
     This should decrease the time for lifting since less code will be copied.

* After testing the spec binaries in paper, check if we can recover other int spec
  binaries with new s2e frontend.
  - Omnetpp-O3 didn't work, checking if I can fix it.
  - perlbench didn't work.
  - gobmk_13x13.tst O0 runs but O3 gets stuck and never terminates. Same applies to other inputs except
  trevorc.tst.
  - Interestingly, gobmk O3 binaries work fine when compiled with 3.8 but WHY?
  Failed binaries don't follow the expected control flow and at some point PC is set to some other value
  that wasn't resolved and for that reason FOff binaries give segfault and only perlbench-O3 FOn can jump
  to original succesfully.
  
  Debug gobmk first using prints by comparing O0 and O3. If we find the reason, this may solve incorrect 
  binary results and unexpected fallbacks to original binary.
  
* Next time set `WRITE_LLVM_SRC=false` in Export plugin before lifting spec benchmark to make it faster.
  It exports captured.ll which we don't need.

* Benchmark recovered spec binaries when fallback is enabled as well. Most likely this is what was presented 
  in the paper. So we will run the fallback enabled binaries with the same input that we lifted. They are not
  supposed to fallback but incur some overhead.
  
* Concolic execution fails because of the image(used for lifting spec bins) we created. We need a new image.  


An example of translation block consists of multiple branches. How can we find which branches have been taken
at runtime?

define private i64 @tcg-llvm-tb-177-804a392(i64*) {
entry:
  %loc_16ptr = alloca i32
  %loc_17ptr = alloca i32
  %loc_18ptr = alloca i32
  %1 = getelementptr i64* %0, i32 0
  %env_v = load i64* %1
  %2 = add i64 %env_v, 856
  %3 = inttoptr i64 %2 to i64*
  store i64 140303246957800, i64* %3
  call void @helper_s2e_tcg_execution_handler(i64 140299010807104, i64 134521746)
  %4 = getelementptr i64* %0, i32 0
  %env_v1 = load i64* %4
  %5 = add i64 %env_v1, 48
  %6 = inttoptr i64 %5 to i32*
  store i32 134521746, i32* %6
  %7 = add i64 %env_v1, 317312
  %8 = inttoptr i64 %7 to i64*
  %tmp5_v = load i64* %8
  %tmp5_v2 = add i64 %tmp5_v, 1
  %9 = add i64 %env_v1, 317312
  %10 = inttoptr i64 %9 to i64*
  store i64 %tmp5_v2, i64* %10
  %11 = add i64 %env_v1, 16
  %esp_ptr = inttoptr i64 %11 to i32*
  %esp_v = load i32* %esp_ptr
  %tmp2_v = add i32 %esp_v, 44 
  %tmp0_v = call i32 @__ldl_mmu(i32 %tmp2_v, i32 1)
  %12 = add i64 %env_v1, 0
  %eax_ptr = inttoptr i64 %12 to i32*
  store i32 %tmp0_v, i32* %eax_ptr
  %13 = add i64 %env_v1, 48
  %14 = inttoptr i64 %13 to i32*
  store i32 134521750, i32* %14
  %15 = add i64 %env_v1, 317312
  %16 = inttoptr i64 %15 to i64*
  %tmp5_v3 = load i64* %16
  %tmp5_v4 = add i64 %tmp5_v3, 1
  %17 = add i64 %env_v1, 317312
  %18 = inttoptr i64 %17 to i64*
  store i64 %tmp5_v4, i64* %18
  %19 = add i64 %env_v1, 8
  %edx_ptr = inttoptr i64 %19 to i32*
  store i32 0, i32* %edx_ptr
  %20 = add i64 %env_v1, 40
  %cc_dst_ptr = inttoptr i64 %20 to i32*
  store i32 0, i32* %cc_dst_ptr
  %21 = add i64 %env_v1, 48
  %22 = inttoptr i64 %21 to i32*
  store i32 134521752, i32* %22
  %23 = add i64 %env_v1, 317312
  %24 = inttoptr i64 %23 to i64*
  %tmp5_v5 = load i64* %24
  %tmp5_v6 = add i64 %tmp5_v5, 1
  %25 = add i64 %env_v1, 317312
  %26 = inttoptr i64 %25 to i64*
  store i64 %tmp5_v6, i64* %26
  %27 = add i64 %env_v1, 32
  %cc_op_ptr = inttoptr i64 %27 to i32*
  store i32 24, i32* %cc_op_ptr
  %tmp2_v7 = add i32 %esp_v, 40
  call void @__stl_mmu(i32 %tmp2_v7, i32 32, i32 1)
  %28 = add i64 %env_v1, 48
  %29 = inttoptr i64 %28 to i32*
  store i32 134521760, i32* %29
  %30 = add i64 %env_v1, 317312
  %31 = inttoptr i64 %30 to i64*
  %tmp5_v8 = load i64* %31
  %tmp5_v9 = add i64 %tmp5_v8, 1
  %32 = add i64 %env_v1, 317312
  %33 = inttoptr i64 %32 to i64*
  store i64 %tmp5_v9, i64* %33
  store i32 24, i32* %cc_op_ptr
  %34 = add i64 %env_v1, 12
  %ebx_ptr = inttoptr i64 %34 to i32*
  store i32 1, i32* %ebx_ptr
  %35 = add i64 %env_v1, 48
  %36 = inttoptr i64 %35 to i32*
  store i32 134521765, i32* %36
  %37 = add i64 %env_v1, 317312
  %38 = inttoptr i64 %37 to i64*
  %tmp5_v10 = load i64* %38
  %tmp5_v11 = add i64 %tmp5_v10, 1
  %39 = add i64 %env_v1, 317312
  %40 = inttoptr i64 %39 to i64*
  store i64 %tmp5_v11, i64* %40
  store i32 24, i32* %cc_op_ptr
  %tmp2_v12 = add i32 %tmp0_v, 8
  %tmp0_v13 = call i32 @__ldl_mmu(i32 %tmp2_v12, i32 1)
  %41 = add i64 %env_v1, 4
  %ecx_ptr = inttoptr i64 %41 to i32*
  store i32 %tmp0_v13, i32* %ecx_ptr
  %42 = add i64 %env_v1, 48
  %43 = inttoptr i64 %42 to i32*
  store i32 134521768, i32* %43
  %44 = add i64 %env_v1, 317312
  %45 = inttoptr i64 %44 to i64*
  %tmp5_v14 = load i64* %45
  %tmp5_v15 = add i64 %tmp5_v14, 1
  %46 = add i64 %env_v1, 317312
  %47 = inttoptr i64 %46 to i64*
  store i64 %tmp5_v15, i64* %47
  store i32 24, i32* %cc_op_ptr
  %tmp2_v16 = add i32 %tmp0_v, 12
  %tmp0_v17 = call i32 @__ldl_mmu(i32 %tmp2_v16, i32 1)
  %48 = add i64 %env_v1, 28
  %edi_ptr = inttoptr i64 %48 to i32*
  store i32 %tmp0_v17, i32* %edi_ptr
  %49 = add i64 %env_v1, 48
  %50 = inttoptr i64 %49 to i32*
  store i32 134521771, i32* %50
  %51 = add i64 %env_v1, 317312
  %52 = inttoptr i64 %51 to i64*
  %tmp5_v18 = load i64* %52
  %tmp5_v19 = add i64 %tmp5_v18, 1
  %53 = add i64 %env_v1, 317312
  %54 = inttoptr i64 %53 to i64*
  store i64 %tmp5_v19, i64* %54
  store i32 24, i32* %cc_op_ptr
  %tmp2_v20 = add i32 %esp_v, 16
  call void @__stl_mmu(i32 %tmp2_v20, i32 %tmp0_v13, i32 1)
  %55 = add i64 %env_v1, 48
  %56 = inttoptr i64 %55 to i32*
  store i32 134521775, i32* %56
  %57 = add i64 %env_v1, 317312
  %58 = inttoptr i64 %57 to i64*
  %tmp5_v21 = load i64* %58
  %tmp5_v22 = add i64 %tmp5_v21, 1
  %59 = add i64 %env_v1, 317312
  %60 = inttoptr i64 %59 to i64*
  store i64 %tmp5_v22, i64* %60
  store i32 24, i32* %cc_op_ptr
  %tmp2_v23 = add i32 %esp_v, 20
  call void @__stl_mmu(i32 %tmp2_v23, i32 %tmp0_v17, i32 1)
  %61 = add i64 %env_v1, 48
  %62 = inttoptr i64 %61 to i32*
  store i32 134521779, i32* %62
  %63 = add i64 %env_v1, 317312
  %64 = inttoptr i64 %63 to i64*
  %tmp5_v24 = load i64* %64
  %tmp5_v25 = add i64 %tmp5_v24, 1
  %65 = add i64 %env_v1, 317312
  %66 = inttoptr i64 %65 to i64*
  store i64 %tmp5_v25, i64* %66
  store i32 24, i32* %cc_op_ptr
  %tmp2_v26 = add i32 %esp_v, 60
  %67 = call i8 @__ldb_mmu(i32 %tmp2_v26, i32 1)
  %tmp0_v27 = zext i8 %67 to i32
  %68 = and i32 %tmp0_v27, 255
  %69 = shl i32 %68, 0
  %70 = and i32 %tmp0_v13, -256
  %tmp-7_v = or i32 %70, %69
  store i32 %tmp-7_v, i32* %ecx_ptr
  %71 = add i64 %env_v1, 48
  %72 = inttoptr i64 %71 to i32*
  store i32 134521783, i32* %72
  %73 = add i64 %env_v1, 317312
  %74 = inttoptr i64 %73 to i64*
  %tmp5_v28 = load i64* %74
  %tmp5_v29 = add i64 %tmp5_v28, 1
  %75 = add i64 %env_v1, 317312
  %76 = inttoptr i64 %75 to i64*
  store i64 %tmp5_v29, i64* %76
  store i32 24, i32* %cc_op_ptr
  %tmp2_v30 = add i32 %tmp0_v, 16
  %tmp0_v31 = call i32 @__ldl_mmu(i32 %tmp2_v30, i32 1)
  store i32 %tmp0_v31, i32* %edi_ptr
  %77 = add i64 %env_v1, 48
  %78 = inttoptr i64 %77 to i32*
  store i32 134521786, i32* %78
  %79 = add i64 %env_v1, 317312
  %80 = inttoptr i64 %79 to i64*
  %tmp5_v32 = load i64* %80
  %tmp5_v33 = add i64 %tmp5_v32, 1
  %81 = add i64 %env_v1, 317312
  %82 = inttoptr i64 %81 to i64*
  store i64 %tmp5_v33, i64* %82
  store i32 24, i32* %cc_op_ptr
  store i32 0, i32* %eax_ptr
  store i32 0, i32* %cc_dst_ptr
  %83 = add i64 %env_v1, 48
  %84 = inttoptr i64 %83 to i32*
  store i32 134521788, i32* %84
  %85 = add i64 %env_v1, 317312
  %86 = inttoptr i64 %85 to i64*
  %tmp5_v34 = load i64* %86
  %tmp5_v35 = add i64 %tmp5_v34, 1
  %87 = add i64 %env_v1, 317312
  %88 = inttoptr i64 %87 to i64*
  store i64 %tmp5_v35, i64* %88
  store i32 24, i32* %cc_op_ptr
  %tmp2_v36 = add i32 %esp_v, 32
  call void @__stl_mmu(i32 %tmp2_v36, i32 0, i32 1)
  %89 = add i64 %env_v1, 48
  %90 = inttoptr i64 %89 to i32*
  store i32 134521796, i32* %90
  %91 = add i64 %env_v1, 317312
  %92 = inttoptr i64 %91 to i64*
  %tmp5_v37 = load i64* %92
  %tmp5_v38 = add i64 %tmp5_v37, 1
  %93 = add i64 %env_v1, 317312
  %94 = inttoptr i64 %93 to i64*
  store i64 %tmp5_v38, i64* %94
  store i32 24, i32* %cc_op_ptr
  %tmp-10_v = and i32 %tmp-7_v, 32
  store i32 %tmp-10_v, i32* %cc_dst_ptr
  %95 = add i64 %env_v1, 48
  %96 = inttoptr i64 %95 to i32*
  store i32 134521799, i32* %96
  %97 = add i64 %env_v1, 317312
  %98 = inttoptr i64 %97 to i64*
  %tmp5_v39 = load i64* %98
  %tmp5_v40 = add i64 %tmp5_v39, 1
  %99 = add i64 %env_v1, 317312
  %100 = inttoptr i64 %99 to i64*
  store i64 %tmp5_v40, i64* %100
  store i32 22, i32* %cc_op_ptr
  store i32 0, i32* %loc_16ptr
  %tmp4_v = and i32 %tmp-10_v, 255
  %101 = icmp ne i32 %tmp4_v, 0
  br i1 %101, label %label_0, label %102

; <label>:102                                     ; preds = %entry
  store i32 1, i32* %loc_16ptr
  br label %label_0

label_0:                                          ; preds = %102, %entry
  %loc16_v = load i32* %loc_16ptr
  %103 = getelementptr i64* %0, i32 0
  %env_v41 = load i64* %103
  %104 = add i64 %env_v41, 0
  %eax_ptr42 = inttoptr i64 %104 to i32*
  %eax_v = load i32* %eax_ptr42
  %105 = and i32 %loc16_v, 255
  %106 = shl i32 %105, 0
  %107 = and i32 %eax_v, -256
  %tmp-8_v = or i32 %107, %106
  store i32 %tmp-8_v, i32* %eax_ptr42
  %108 = add i64 %env_v41, 48
  %109 = inttoptr i64 %108 to i32*
  store i32 134521802, i32* %109
  %110 = add i64 %env_v41, 317312
  %111 = inttoptr i64 %110 to i64*
  %tmp5_v44 = load i64* %111
  %tmp5_v45 = add i64 %tmp5_v44, 1
  %112 = add i64 %env_v41, 317312
  %113 = inttoptr i64 %112 to i64*
  store i64 %tmp5_v45, i64* %113
  %114 = add i64 %env_v41, 32
  %cc_op_ptr46 = inttoptr i64 %114 to i32*
  store i32 22, i32* %cc_op_ptr46
  store i32 0, i32* %loc_16ptr
  %115 = add i64 %env_v41, 40
  %cc_dst_ptr47 = inttoptr i64 %115 to i32*
  %cc_dst_v = load i32* %cc_dst_ptr47
  %tmp4_v48 = and i32 %cc_dst_v, 255
  %116 = icmp eq i32 %tmp4_v48, 0
  br i1 %116, label %label_1, label %117

; <label>:117                                     ; preds = %label_0
  store i32 1, i32* %loc_16ptr
  br label %label_1

label_1:                                          ; preds = %117, %label_0
  %loc16_v49 = load i32* %loc_16ptr
  %118 = getelementptr i64* %0, i32 0
  %env_v50 = load i64* %118
  %119 = add i64 %env_v50, 8
  %edx_ptr51 = inttoptr i64 %119 to i32*
  %edx_v = load i32* %edx_ptr51
  %120 = and i32 %loc16_v49, 255
  %121 = shl i32 %120, 0
  %122 = and i32 %edx_v, -256
  %tmp-6_v = or i32 %122, %121
  store i32 %tmp-6_v, i32* %edx_ptr51
  %123 = add i64 %env_v50, 48
  %124 = inttoptr i64 %123 to i32*
  store i32 134521805, i32* %124
  %125 = add i64 %env_v50, 317312
  %126 = inttoptr i64 %125 to i64*
  %tmp5_v53 = load i64* %126
  %tmp5_v54 = add i64 %tmp5_v53, 1
  %127 = add i64 %env_v50, 317312
  %128 = inttoptr i64 %127 to i64*
  store i64 %tmp5_v54, i64* %128
  %129 = add i64 %env_v50, 32
  %cc_op_ptr55 = inttoptr i64 %129 to i32*
  store i32 22, i32* %cc_op_ptr55
  %130 = add i64 %env_v50, 4
  %ecx_ptr56 = inttoptr i64 %130 to i32*
  %ecx_v = load i32* %ecx_ptr56
  %131 = add i64 %env_v50, 0
  %eax_ptr57 = inttoptr i64 %131 to i32*
  %eax_v58 = load i32* %eax_ptr57
  %loc18_v = and i32 %ecx_v, 31
  store i32 %loc18_v, i32* %loc_18ptr
  store i32 %eax_v58, i32* %loc_16ptr
  %tmp0_v59 = shl i32 %eax_v58, %loc18_v
  store i32 %tmp0_v59, i32* %eax_ptr57
  store i32 22, i32* %cc_op_ptr55
  store i32 %tmp0_v59, i32* %loc_17ptr
  %132 = icmp eq i32 %loc18_v, 0
  br i1 %132, label %label_2, label %133

; <label>:133                                     ; preds = %label_1
  %loc18_v60 = load i32* %loc_18ptr
  %loc18_v61 = add i32 %loc18_v60, -1
  store i32 %loc18_v61, i32* %loc_18ptr
  %loc17_v = load i32* %loc_17ptr
  %134 = getelementptr i64* %0, i32 0
  %env_v62 = load i64* %134
  %135 = add i64 %env_v62, 40
  %cc_dst_ptr63 = inttoptr i64 %135 to i32*
  store i32 %loc17_v, i32* %cc_dst_ptr63
  %loc16_v64 = load i32* %loc_16ptr
  %tmp-11_v = shl i32 %loc16_v64, %loc18_v61
  %136 = add i64 %env_v62, 36
  %cc_src_ptr = inttoptr i64 %136 to i32*
  store i32 %tmp-11_v, i32* %cc_src_ptr
  %137 = add i64 %env_v62, 32
  %cc_op_ptr65 = inttoptr i64 %137 to i32*
  store i32 36, i32* %cc_op_ptr65
  br label %label_2
  
label_2:                                          ; preds = %133, %label_1
  %138 = getelementptr i64* %0, i32 0
  %env_v66 = load i64* %138
  %139 = add i64 %env_v66, 48
  %140 = inttoptr i64 %139 to i32*
  store i32 134521807, i32* %140
  %141 = add i64 %env_v66, 317312
  %142 = inttoptr i64 %141 to i64*
  %tmp5_v67 = load i64* %142
  %tmp5_v68 = add i64 %tmp5_v67, 1
  %143 = add i64 %env_v66, 317312
  %144 = inttoptr i64 %143 to i64*
  store i64 %tmp5_v68, i64* %144
  %145 = add i64 %env_v66, 4
  %ecx_ptr69 = inttoptr i64 %145 to i32*
  %ecx_v70 = load i32* %ecx_ptr69
  %146 = add i64 %env_v66, 8
  %edx_ptr71 = inttoptr i64 %146 to i32*
  %edx_v72 = load i32* %edx_ptr71
  %loc16_v73 = and i32 %ecx_v70, 31
  store i32 %loc16_v73, i32* %loc_16ptr
  store i32 %edx_v72, i32* %loc_18ptr
  %tmp0_v74 = shl i32 %edx_v72, %loc16_v73
  store i32 %tmp0_v74, i32* %edx_ptr71
  store i32 %tmp0_v74, i32* %loc_17ptr
  %147 = icmp eq i32 %loc16_v73, 0
  br i1 %147, label %label_3, label %148

; <label>:148                                     ; preds = %label_2
  %loc16_v75 = load i32* %loc_16ptr
  %loc16_v76 = add i32 %loc16_v75, -1
  store i32 %loc16_v76, i32* %loc_16ptr
  %loc17_v77 = load i32* %loc_17ptr
  %149 = getelementptr i64* %0, i32 0
  %env_v78 = load i64* %149
  %150 = add i64 %env_v78, 40
  %cc_dst_ptr79 = inttoptr i64 %150 to i32*
  store i32 %loc17_v77, i32* %cc_dst_ptr79
  %loc18_v80 = load i32* %loc_18ptr
  %tmp-11_v81 = shl i32 %loc18_v80, %loc16_v76
  %151 = add i64 %env_v78, 36
  %cc_src_ptr82 = inttoptr i64 %151 to i32*
  store i32 %tmp-11_v81, i32* %cc_src_ptr82
  %152 = add i64 %env_v78, 32
  %cc_op_ptr83 = inttoptr i64 %152 to i32*
  store i32 36, i32* %cc_op_ptr83
  br label %label_3

label_3:                                          ; preds = %148, %label_2
  %153 = getelementptr i64* %0, i32 0
  %env_v84 = load i64* %153
  %154 = add i64 %env_v84, 48
  %155 = inttoptr i64 %154 to i32*
  store i32 134521809, i32* %155
  %156 = add i64 %env_v84, 317312
  %157 = inttoptr i64 %156 to i64*
  %tmp5_v85 = load i64* %157
  %tmp5_v86 = add i64 %tmp5_v85, 1
  %158 = add i64 %env_v84, 317312
  %159 = inttoptr i64 %158 to i64*
  store i64 %tmp5_v86, i64* %159
  %160 = add i64 %env_v84, 16
  %esp_ptr87 = inttoptr i64 %160 to i32*
  %esp_v88 = load i32* %esp_ptr87
  %tmp2_v89 = add i32 %esp_v88, 24
  %161 = add i64 %env_v84, 0
  %eax_ptr90 = inttoptr i64 %161 to i32*
  %eax_v91 = load i32* %eax_ptr90
  call void @__stl_mmu(i32 %tmp2_v89, i32 %eax_v91, i32 1)
  %162 = add i64 %env_v84, 48
  %163 = inttoptr i64 %162 to i32*
  store i32 134521813, i32* %163
  %164 = add i64 %env_v84, 317312
  %165 = inttoptr i64 %164 to i64*
  %tmp5_v92 = load i64* %165
  %tmp5_v93 = add i64 %tmp5_v92, 1
  %166 = add i64 %env_v84, 317312
  %167 = inttoptr i64 %166 to i64*
  store i64 %tmp5_v93, i64* %167
  %tmp2_v94 = add i32 %esp_v88, 16
  %tmp0_v95 = call i32 @__ldl_mmu(i32 %tmp2_v94, i32 1)
  %168 = add i64 %env_v84, 4
  %ecx_ptr96 = inttoptr i64 %168 to i32*
  store i32 %tmp0_v95, i32* %ecx_ptr96
  %169 = add i64 %env_v84, 48
  %170 = inttoptr i64 %169 to i32*
  store i32 134521817, i32* %170
  %171 = add i64 %env_v84, 317312
  %172 = inttoptr i64 %171 to i64*
  %tmp5_v97 = load i64* %172
  %tmp5_v98 = add i64 %tmp5_v97, 1
  %173 = add i64 %env_v84, 317312
  %174 = inttoptr i64 %173 to i64*
  store i64 %tmp5_v98, i64* %174
  %tmp2_v99 = add i32 %esp_v88, 40
  %tmp0_v100 = call i32 @__ldl_mmu(i32 %tmp2_v99, i32 1)
  store i32 %tmp0_v100, i32* %eax_ptr90
  %175 = add i64 %env_v84, 48
  %176 = inttoptr i64 %175 to i32*
  store i32 134521821, i32* %176
  %177 = add i64 %env_v84, 317312
  %178 = inttoptr i64 %177 to i64*
  %tmp5_v101 = load i64* %178
  %tmp5_v102 = add i64 %tmp5_v101, 1
  %179 = add i64 %env_v84, 317312
  %180 = inttoptr i64 %179 to i64*
  store i64 %tmp5_v102, i64* %180
  %tmp2_v103 = add i32 %esp_v88, 28
  %181 = add i64 %env_v84, 8
  %edx_ptr104 = inttoptr i64 %181 to i32*
  %edx_v105 = load i32* %edx_ptr104
  call void @__stl_mmu(i32 %tmp2_v103, i32 %edx_v105, i32 1)
  %182 = add i64 %env_v84, 48
  %183 = inttoptr i64 %182 to i32*
  store i32 134521825, i32* %183
  %184 = add i64 %env_v84, 317312
  %185 = inttoptr i64 %184 to i64*
  %tmp5_v106 = load i64* %185
  %tmp5_v107 = add i64 %tmp5_v106, 1
  %186 = add i64 %env_v84, 317312
  %187 = inttoptr i64 %186 to i64*
  store i64 %tmp5_v107, i64* %187
  %tmp0_v108 = sub i32 %tmp0_v100, %tmp0_v95
  store i32 %tmp0_v108, i32* %eax_ptr90
  %188 = add i64 %env_v84, 36
  %cc_src_ptr109 = inttoptr i64 %188 to i32*
  store i32 %tmp0_v95, i32* %cc_src_ptr109
  %189 = add i64 %env_v84, 40
  %cc_dst_ptr110 = inttoptr i64 %189 to i32*
  store i32 %tmp0_v108, i32* %cc_dst_ptr110
  %190 = add i64 %env_v84, 48
  %191 = inttoptr i64 %190 to i32*
  store i32 134521827, i32* %191
  %192 = add i64 %env_v84, 317312
  %193 = inttoptr i64 %192 to i64*
  %tmp5_v111 = load i64* %193
  %tmp5_v112 = add i64 %tmp5_v111, 1
  %194 = add i64 %env_v84, 317312
  %195 = inttoptr i64 %194 to i64*
  store i64 %tmp5_v112, i64* %195
  %196 = add i64 %env_v84, 32
  %cc_op_ptr113 = inttoptr i64 %196 to i32*
  store i32 16, i32* %cc_op_ptr113
  %tmp2_v114 = add i32 %esp_v88, 96
  call void @__stl_mmu(i32 %tmp2_v114, i32 0, i32 1)
  %197 = add i64 %env_v84, 48
  %198 = inttoptr i64 %197 to i32*
  store i32 134521835, i32* %198
  %199 = add i64 %env_v84, 317312
  %200 = inttoptr i64 %199 to i64*
  %tmp5_v115 = load i64* %200
  %tmp5_v116 = add i64 %tmp5_v115, 1
  %201 = add i64 %env_v84, 317312
  %202 = inttoptr i64 %201 to i64*
  store i64 %tmp5_v116, i64* %202
  store i32 16, i32* %cc_op_ptr113
  %tmp2_v117 = add i32 %esp_v88, 40
  call void @__stl_mmu(i32 %tmp2_v117, i32 %tmp0_v108, i32 1)
  %203 = add i64 %env_v84, 48
  %204 = inttoptr i64 %203 to i32*
  store i32 134521839, i32* %204
  %205 = add i64 %env_v84, 317312
  %206 = inttoptr i64 %205 to i64*
  %tmp5_v118 = load i64* %206
  %tmp5_v119 = add i64 %tmp5_v118, 1
  %207 = add i64 %env_v84, 317312
  %208 = inttoptr i64 %207 to i64*
  store i64 %tmp5_v119, i64* %208
  store i32 16, i32* %cc_op_ptr113
  %209 = add i64 %env_v84, 24
  %esi_ptr = inttoptr i64 %209 to i32*
  %esi_v = load i32* %esi_ptr
  store i32 %esi_v, i32* %eax_ptr90
  %210 = add i64 %env_v84, 48
  %211 = inttoptr i64 %210 to i32*
  store i32 134521841, i32* %211
  %212 = add i64 %env_v84, 317312
  %213 = inttoptr i64 %212 to i64*
  %tmp5_v120 = load i64* %213
  %tmp5_v121 = add i64 %tmp5_v120, 1
  %214 = add i64 %env_v84, 317312
  %215 = inttoptr i64 %214 to i64*
  store i64 %tmp5_v121, i64* %215
  store i32 16, i32* %cc_op_ptr113
  %tmp8_v = shl i32 %esi_v, 3
  %tmp0_v122 = shl i32 %esi_v, 4
  store i32 %tmp0_v122, i32* %eax_ptr90
  store i32 %tmp8_v, i32* %cc_src_ptr109
  store i32 %tmp0_v122, i32* %cc_dst_ptr110
  %216 = add i64 %env_v84, 48
  %217 = inttoptr i64 %216 to i32*
  store i32 134521844, i32* %217
  %218 = add i64 %env_v84, 317312
  %219 = inttoptr i64 %218 to i64*
  %tmp5_v123 = load i64* %219
  %tmp5_v124 = add i64 %tmp5_v123, 1
  %220 = add i64 %env_v84, 317312
  %221 = inttoptr i64 %220 to i64*
  store i64 %tmp5_v124, i64* %221
  store i32 36, i32* %cc_op_ptr113
  %222 = add i64 %env_v84, 12
  %ebx_ptr125 = inttoptr i64 %222 to i32*
  %ebx_v = load i32* %ebx_ptr125
  %loc18_v126 = and i32 %tmp0_v95, 31
  store i32 %loc18_v126, i32* %loc_18ptr
  store i32 %ebx_v, i32* %loc_16ptr
  %tmp0_v127 = shl i32 %ebx_v, %loc18_v126
  store i32 %tmp0_v127, i32* %ebx_ptr125
  store i32 36, i32* %cc_op_ptr113
  store i32 %tmp0_v127, i32* %loc_17ptr
  %223 = icmp eq i32 %loc18_v126, 0
  br i1 %223, label %label_4, label %224

; <label>:224                                     ; preds = %label_3
  %loc18_v128 = load i32* %loc_18ptr
  %loc18_v129 = add i32 %loc18_v128, -1
  store i32 %loc18_v129, i32* %loc_18ptr
  %loc17_v130 = load i32* %loc_17ptr
  %225 = getelementptr i64* %0, i32 0
  %env_v131 = load i64* %225
  %226 = add i64 %env_v131, 40
  %cc_dst_ptr132 = inttoptr i64 %226 to i32*
  store i32 %loc17_v130, i32* %cc_dst_ptr132
  %loc16_v133 = load i32* %loc_16ptr
  %tmp-11_v134 = shl i32 %loc16_v133, %loc18_v129
  %227 = add i64 %env_v131, 36
  %cc_src_ptr135 = inttoptr i64 %227 to i32*
  store i32 %tmp-11_v134, i32* %cc_src_ptr135
  %228 = add i64 %env_v131, 32
  %cc_op_ptr136 = inttoptr i64 %228 to i32*
  store i32 36, i32* %cc_op_ptr136
  br label %label_4

label_4:                                          ; preds = %224, %label_3
  %229 = getelementptr i64* %0, i32 0
  %env_v137 = load i64* %229
  %230 = add i64 %env_v137, 48
  %231 = inttoptr i64 %230 to i32*
  store i32 134521846, i32* %231
  %232 = add i64 %env_v137, 317312
  %233 = inttoptr i64 %232 to i64*
  %tmp5_v138 = load i64* %233
  %tmp5_v139 = add i64 %tmp5_v138, 1
  %234 = add i64 %env_v137, 317312
  %235 = inttoptr i64 %234 to i64*
  store i64 %tmp5_v139, i64* %235
  %236 = add i64 %env_v137, 16
  %esp_ptr140 = inttoptr i64 %236 to i32*
  %esp_v141 = load i32* %esp_ptr140
  %tmp2_v142 = add i32 %esp_v141, 48
  %237 = add i64 %env_v137, 0
  %eax_ptr143 = inttoptr i64 %237 to i32*
  %eax_v144 = load i32* %eax_ptr143
  call void @__stl_mmu(i32 %tmp2_v142, i32 %eax_v144, i32 1)
  %238 = add i64 %env_v137, 48
  %239 = inttoptr i64 %238 to i32*
  store i32 134521850, i32* %239
  %240 = add i64 %env_v137, 317312
  %241 = inttoptr i64 %240 to i64*
  %tmp5_v145 = load i64* %241
  %tmp5_v146 = add i64 %tmp5_v145, 1
  %242 = add i64 %env_v137, 317312
  %243 = inttoptr i64 %242 to i64*
  store i64 %tmp5_v146, i64* %243
  %244 = add i64 %env_v137, 48
  %245 = inttoptr i64 %244 to i32*
  store i32 134521850, i32* %245
  call void @helper_raise_exception(i32 7)
  ret i64 0
}
